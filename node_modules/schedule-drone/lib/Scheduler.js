// Generated by CoffeeScript 1.6.2
(function() {
  var Scheduler, cron, events, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  cron = require('cron');

  _ = require('underscore');

  Scheduler = (function(_super) {
    __extends(Scheduler, _super);

    function Scheduler() {
      _ref = Scheduler.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
        This class extends EventEmitter to add an extra
        method `schedule` used to schedule an event trigger
        sometime in the future.
    */


    Scheduler.prototype.schedule = function(timestamp, event, payload) {
      var _this = this;

      if (payload == null) {
        payload = void 0;
      }
      if (!_.isString(event)) {
        throw new Error("Expected `event` to be String. " + event + " given!");
      }
      if (!((_.isString(timestamp)) || (_.isDate(timestamp)))) {
        throw new Error("Expected `timestamp` to be either String or Date." + ("" + timestamp + " given!"));
      }
      return new cron.CronJob({
        cronTime: timestamp,
        onTick: function() {
          return _this.onTickEmit(event, payload);
        },
        start: true
      });
    };

    Scheduler.prototype.onTickEmit = function(event, payload) {
      return this.emit(event, payload);
    };

    return Scheduler;

  })(events.EventEmitter);

  module.exports = Scheduler;

}).call(this);
